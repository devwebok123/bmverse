{"version":3,"file":"static/js/5327.c7e0a36e.chunk.js","mappings":"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","sources":["../node_modules/@ethereumjs/common/src/chains/index.ts","../node_modules/@ethereumjs/common/src/eips/index.ts","../node_modules/@ethereumjs/common/src/hardforks/index.ts","../node_modules/@ethereumjs/common/src/index.ts","../node_modules/crc-32/crc32.js"],"sourcesContent":["import { Chain, chainsType } from './../types'\nimport mainnet from './mainnet.json'\nimport ropsten from './ropsten.json'\nimport rinkeby from './rinkeby.json'\nimport kovan from './kovan.json'\nimport goerli from './goerli.json'\nimport sepolia from './sepolia.json'\n\n/**\n * @hidden\n */\nexport function _getInitializedChains(customChains?: Chain[]) {\n  const names: any = {\n    '1': 'mainnet',\n    '3': 'ropsten',\n    '4': 'rinkeby',\n    '42': 'kovan',\n    '5': 'goerli',\n    '11155111': 'sepolia',\n  }\n  const chains: any = {\n    mainnet,\n    ropsten,\n    rinkeby,\n    kovan,\n    goerli,\n    sepolia,\n  }\n  if (customChains) {\n    for (const chain of customChains) {\n      const name = chain.name\n      names[chain.chainId.toString()] = name\n      chains[name] = chain\n    }\n  }\n\n  chains['names'] = names\n  return chains\n}\n\n/**\n * @deprecated this constant will be internalized (removed)\n * on next major version update\n */\nexport const chains: chainsType = _getInitializedChains()\n","import { eipsType } from './../types'\n\nexport const EIPs: eipsType = {\n  1153: require('./1153.json'),\n  1559: require('./1559.json'),\n  2315: require('./2315.json'),\n  2537: require('./2537.json'),\n  2565: require('./2565.json'),\n  2718: require('./2718.json'),\n  2929: require('./2929.json'),\n  2930: require('./2930.json'),\n  3198: require('./3198.json'),\n  3529: require('./3529.json'),\n  3540: require('./3540.json'),\n  3541: require('./3541.json'),\n  3554: require('./3554.json'),\n  3607: require('./3607.json'),\n  3651: require('./3651.json'),\n  3670: require('./3670.json'),\n  3675: require('./3675.json'),\n  3855: require('./3855.json'),\n  3860: require('./3860.json'),\n  4345: require('./4345.json'),\n  4399: require('./4399.json'),\n  5133: require('./5133.json'),\n}\n","export const hardforks = [\n  ['chainstart', require('./chainstart.json')],\n  ['homestead', require('./homestead.json')],\n  ['dao', require('./dao.json')],\n  ['tangerineWhistle', require('./tangerineWhistle.json')],\n  ['spuriousDragon', require('./spuriousDragon.json')],\n  ['byzantium', require('./byzantium.json')],\n  ['constantinople', require('./constantinople.json')],\n  ['petersburg', require('./petersburg.json')],\n  ['istanbul', require('./istanbul.json')],\n  ['muirGlacier', require('./muirGlacier.json')],\n  ['berlin', require('./berlin.json')],\n  ['london', require('./london.json')],\n  ['shanghai', require('./shanghai.json')],\n  ['arrowGlacier', require('./arrowGlacier.json')],\n  ['grayGlacier', require('./grayGlacier.json')],\n  ['mergeForkIdTransition', require('./mergeForkIdTransition.json')],\n  ['merge', require('./merge.json')],\n]\n","import { EventEmitter } from 'events'\nimport { buf as crc32Buffer } from 'crc-32'\nimport { BN, BNLike, toType, TypeOutput, intToBuffer } from 'ethereumjs-util'\nimport { _getInitializedChains } from './chains'\nimport { hardforks as HARDFORK_CHANGES } from './hardforks'\nimport { EIPs } from './eips'\nimport {\n  BootstrapNode,\n  Chain as IChain,\n  GenesisBlock,\n  GenesisState,\n  Hardfork as HardforkParams,\n} from './types'\n\nexport enum CustomChain {\n  /**\n   * Polygon (Matic) Mainnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMainnet = 'polygon-mainnet',\n\n  /**\n   * Polygon (Matic) Mumbai Testnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMumbai = 'polygon-mumbai',\n\n  /**\n   * Arbitrum Rinkeby Testnet\n   *\n   * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n   */\n  ArbitrumRinkebyTestnet = 'arbitrum-rinkeby-testnet',\n\n  /**\n   * xDai EVM sidechain with a native stable token\n   *\n   * - [Documentation](https://www.xdaichain.com/)\n   */\n  xDaiChain = 'x-dai-chain',\n\n  /**\n   * Optimistic Kovan - testnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticKovan = 'optimistic-kovan',\n\n  /**\n   * Optimistic Ethereum - mainnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticEthereum = 'optimistic-ethereum',\n}\n\nexport enum Chain {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Kovan = 42,\n  Goerli = 5,\n  Sepolia = 11155111,\n}\n\nexport enum Hardfork {\n  Chainstart = 'chainstart',\n  Homestead = 'homestead',\n  Dao = 'dao',\n  TangerineWhistle = 'tangerineWhistle',\n  SpuriousDragon = 'spuriousDragon',\n  Byzantium = 'byzantium',\n  Constantinople = 'constantinople',\n  Petersburg = 'petersburg',\n  Istanbul = 'istanbul',\n  MuirGlacier = 'muirGlacier',\n  Berlin = 'berlin',\n  London = 'london',\n  ArrowGlacier = 'arrowGlacier',\n  GrayGlacier = 'grayGlacier',\n  MergeForkIdTransition = 'mergeForkIdTransition',\n  Merge = 'merge',\n  Shanghai = 'shanghai',\n}\n\nexport enum ConsensusType {\n  ProofOfStake = 'pos',\n  ProofOfWork = 'pow',\n  ProofOfAuthority = 'poa',\n}\n\nexport enum ConsensusAlgorithm {\n  Ethash = 'ethash',\n  Clique = 'clique',\n  Casper = 'casper',\n}\n\ninterface BaseOpts {\n  /**\n   * String identifier ('byzantium') for hardfork or {@link Hardfork} enum.\n   *\n   * Default: Hardfork.Istanbul\n   */\n  hardfork?: string | Hardfork\n  /**\n   * Limit parameter returns to the given hardforks\n   */\n  supportedHardforks?: Array<string | Hardfork>\n  /**\n   * Selected EIPs which can be activated, please use an array for instantiation\n   * (e.g. `eips: [ 2537, ]`)\n   *\n   * Currently supported:\n   *\n   * - [EIP-2537](https://eips.ethereum.org/EIPS/eip-2537) - BLS12-381 precompiles\n   */\n  eips?: number[]\n}\n\n/**\n * Options for instantiating a {@link Common} instance.\n */\nexport interface CommonOpts extends BaseOpts {\n  /**\n   * Chain name ('mainnet'), id (1), or {@link Chain} enum,\n   * either from a chain directly supported or a custom chain\n   * passed in via {@link CommonOpts.customChains}.\n   */\n  chain: string | number | Chain | BN | object\n  /**\n   * Initialize (in addition to the supported chains) with the selected\n   * custom chains\n   *\n   * Usage (directly with the respective chain intialization via the {@link CommonOpts.chain} option):\n   *\n   * Pattern 1 (without genesis state):\n   *\n   * ```javascript\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ myCustomChain1 ]})\n   * ```\n   *\n   * Pattern 2 (with genesis state see {@link GenesisState} for format):\n   *\n   * ```javascript\n   * const simpleState = {\n   *   '0x0...01': '0x100', // For EoA\n   * }\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * import chain1GenesisState from '[PATH_TO_GENESIS_STATES]/chain1GenesisState.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ [ myCustomChain1, simpleState ] ]})\n   * ```\n   *\n   * Pattern 3 (with complex genesis state, containing contract accounts and storage).\n   * Note that in {@link AccountState} there are two\n   * accepted types. This allows to easily insert accounts in the genesis state:\n   *\n   * A complex genesis state with Contract and EoA states would have the following format:\n   *\n   * ```javascript\n   * const complexState = {\n   *   '0x0...01': '0x100', // For EoA\n   *   '0x0...02': ['0x1', '0xRUNTIME_BYTECODE', [[ keyOne, valueOne ], [ keyTwo, valueTwo ]]] // For contracts\n   * }\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ [ myCustomChain1, complexState ] ]})\n   * ```\n   */\n  customChains?: IChain[] | [IChain, GenesisState][]\n}\n\n/**\n * Options to be used with the {@link Common.custom} static constructor.\n */\nexport interface CustomCommonOpts extends BaseOpts {\n  /**\n   * The name (`mainnet`), id (`1`), or {@link Chain} enum of\n   * a standard chain used to base the custom chain params on.\n   */\n  baseChain?: string | number | Chain | BN\n}\n\ninterface hardforkOptions {\n  /** optional, only allow supported HFs (default: false) */\n  onlySupported?: boolean\n  /** optional, only active HFs (default: false) */\n  onlyActive?: boolean\n}\n\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport default class Common extends EventEmitter {\n  readonly DEFAULT_HARDFORK: string | Hardfork\n\n  private _chainParams: IChain\n  private _hardfork: string | Hardfork\n  private _supportedHardforks: Array<string | Hardfork> = []\n  private _eips: number[] = []\n  private _customChains: IChain[] | [IChain, GenesisState][]\n\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `@ethereumjs/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n  static custom(\n    chainParamsOrName: Partial<IChain> | CustomChain,\n    opts: CustomCommonOpts = {}\n  ): Common {\n    const baseChain = opts.baseChain ?? 'mainnet'\n    const standardChainParams = { ...Common._getChainParams(baseChain) }\n    standardChainParams['name'] = 'custom-chain'\n\n    if (typeof chainParamsOrName !== 'string') {\n      return new Common({\n        chain: {\n          ...standardChainParams,\n          ...chainParamsOrName,\n        },\n        ...opts,\n      })\n    } else {\n      if (chainParamsOrName === CustomChain.PolygonMainnet) {\n        return Common.custom(\n          {\n            name: CustomChain.PolygonMainnet,\n            chainId: 137,\n            networkId: 137,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.PolygonMumbai) {\n        return Common.custom(\n          {\n            name: CustomChain.PolygonMumbai,\n            chainId: 80001,\n            networkId: 80001,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n        return Common.custom(\n          {\n            name: CustomChain.ArbitrumRinkebyTestnet,\n            chainId: 421611,\n            networkId: 421611,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.xDaiChain) {\n        return Common.custom(\n          {\n            name: CustomChain.xDaiChain,\n            chainId: 100,\n            networkId: 100,\n          },\n          opts\n        )\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticKovan) {\n        return Common.custom(\n          {\n            name: CustomChain.OptimisticKovan,\n            chainId: 69,\n            networkId: 69,\n          },\n          // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n          { hardfork: Hardfork.Berlin, ...opts }\n        )\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n        return Common.custom(\n          {\n            name: CustomChain.OptimisticEthereum,\n            chainId: 10,\n            networkId: 10,\n          },\n          // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n          { hardfork: Hardfork.Berlin, ...opts }\n        )\n      }\n      throw new Error(`Custom chain ${chainParamsOrName} not supported`)\n    }\n  }\n\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one. It uses all the `Chain`\n   * params from {@link baseChain} except the ones overridden in {@link customChainParams}.\n   *\n   * @deprecated Use {@link Common.custom} instead\n   *\n   * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n   * chain params on.\n   * @param customChainParams The custom parameters of the chain.\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n   */\n  static forCustomChain(\n    baseChain: string | number | Chain,\n    customChainParams: Partial<IChain>,\n    hardfork?: string | Hardfork,\n    supportedHardforks?: Array<string | Hardfork>\n  ): Common {\n    const standardChainParams = Common._getChainParams(baseChain)\n\n    return new Common({\n      chain: {\n        ...standardChainParams,\n        ...customChainParams,\n      },\n      hardfork: hardfork,\n      supportedHardforks: supportedHardforks,\n    })\n  }\n\n  /**\n   * Static method to determine if a {@link chainId} is supported as a standard chain\n   * @param chainId BN id (`1`) of a standard chain\n   * @returns boolean\n   */\n  static isSupportedChainId(chainId: BN): boolean {\n    const initializedChains: any = _getInitializedChains()\n    return Boolean(initializedChains['names'][chainId.toString()])\n  }\n\n  private static _getChainParams(\n    chain: string | number | Chain | BN,\n    customChains?: IChain[]\n  ): IChain {\n    const initializedChains: any = _getInitializedChains(customChains)\n    if (typeof chain === 'number' || BN.isBN(chain)) {\n      chain = chain.toString()\n\n      if (initializedChains['names'][chain]) {\n        const name: string = initializedChains['names'][chain]\n        return initializedChains[name]\n      }\n\n      throw new Error(`Chain with ID ${chain} not supported`)\n    }\n\n    if (initializedChains[chain]) {\n      return initializedChains[chain]\n    }\n\n    throw new Error(`Chain with name ${chain} not supported`)\n  }\n\n  /**\n   *\n   * @constructor\n   */\n  constructor(opts: CommonOpts) {\n    super()\n    this._customChains = opts.customChains ?? []\n    this._chainParams = this.setChain(opts.chain)\n    this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Istanbul\n    for (const hf of this._chainParams.hardforks) {\n      if (!hf.forkHash) {\n        hf.forkHash = this._calcForkHash(hf.name)\n      }\n    }\n    this._hardfork = this.DEFAULT_HARDFORK\n    if (opts.supportedHardforks) {\n      this._supportedHardforks = opts.supportedHardforks\n    }\n    if (opts.hardfork) {\n      this.setHardfork(opts.hardfork)\n    }\n    if (opts.eips) {\n      this.setEIPs(opts.eips)\n    }\n  }\n\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain\n   *     representation. Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n  setChain(chain: string | number | Chain | BN | object): any {\n    if (typeof chain === 'number' || typeof chain === 'string' || BN.isBN(chain)) {\n      // Filter out genesis states if passed in to customChains\n      let plainCustomChains: IChain[]\n      if (\n        this._customChains &&\n        this._customChains.length > 0 &&\n        Array.isArray(this._customChains[0])\n      ) {\n        plainCustomChains = (this._customChains as [IChain, GenesisState][]).map((e) => e[0])\n      } else {\n        plainCustomChains = this._customChains as IChain[]\n      }\n      this._chainParams = Common._getChainParams(chain, plainCustomChains)\n    } else if (typeof chain === 'object') {\n      if (this._customChains.length > 0) {\n        throw new Error(\n          'Chain must be a string, number, or BN when initialized with customChains passed in'\n        )\n      }\n      const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes']\n      for (const param of required) {\n        if ((<any>chain)[param] === undefined) {\n          throw new Error(`Missing required chain parameter: ${param}`)\n        }\n      }\n      this._chainParams = chain as IChain\n    } else {\n      throw new Error('Wrong input format')\n    }\n    return this._chainParams\n  }\n\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n   */\n  setHardfork(hardfork: string | Hardfork): void {\n    if (!this._isSupportedHardfork(hardfork)) {\n      throw new Error(`Hardfork ${hardfork} not set as supported in supportedHardforks`)\n    }\n    let existing = false\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if (hfChanges[0] === hardfork) {\n        if (this._hardfork !== hardfork) {\n          this._hardfork = hardfork\n          this.emit('hardforkChanged', hardfork)\n        }\n        existing = true\n      }\n    }\n    if (!existing) {\n      throw new Error(`Hardfork with name ${hardfork} not supported`)\n    }\n  }\n\n  /**\n   * Returns the hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF\n   */\n  getHardforkByBlockNumber(blockNumber: BNLike, td?: BNLike): string {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    td = toType(td, TypeOutput.BN)\n\n    let hardfork = Hardfork.Chainstart\n    let minTdHF\n    let maxTdHF\n    let previousHF\n    for (const hf of this.hardforks()) {\n      // Skip comparison for not applied HFs\n      if (hf.block === null) {\n        if (td !== undefined && td !== null && hf.td !== undefined && hf.td !== null) {\n          if (td.gte(new BN(hf.td))) {\n            return hf.name\n          }\n        }\n        continue\n      }\n      if (blockNumber.gte(new BN(hf.block))) {\n        hardfork = hf.name as Hardfork\n      }\n      if (td && hf.td) {\n        if (td.gte(new BN(hf.td))) {\n          minTdHF = hf.name\n        } else {\n          maxTdHF = previousHF\n        }\n      }\n      previousHF = hf.name\n    }\n    if (td) {\n      let msgAdd = `block number: ${blockNumber} (-> ${hardfork}), `\n      if (minTdHF) {\n        if (!this.hardforkGteHardfork(hardfork, minTdHF)) {\n          const msg = 'HF determined by block number is lower than the minimum total difficulty HF'\n          msgAdd += `total difficulty: ${td} (-> ${minTdHF})`\n          throw new Error(`${msg}: ${msgAdd}`)\n        }\n      }\n      if (maxTdHF) {\n        if (!this.hardforkGteHardfork(maxTdHF, hardfork)) {\n          const msg = 'Maximum HF determined by total difficulty is lower than the block number HF'\n          msgAdd += `total difficulty: ${td} (-> ${maxTdHF})`\n          throw new Error(`${msg}: ${msgAdd}`)\n        }\n      }\n    }\n    return hardfork\n  }\n\n  /**\n   * Sets a new hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF set\n   */\n  setHardforkByBlockNumber(blockNumber: BNLike, td?: BNLike): string {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td)\n    this.setHardfork(hardfork)\n    return hardfork\n  }\n\n  /**\n   * Internal helper function to choose between hardfork set and hardfork provided as param\n   * @param hardfork Hardfork given to function as a parameter\n   * @returns Hardfork chosen to be used\n   */\n  _chooseHardfork(hardfork?: string | Hardfork | null, onlySupported: boolean = true): string {\n    if (!hardfork) {\n      hardfork = this._hardfork\n    } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n      throw new Error(`Hardfork ${hardfork} not set as supported in supportedHardforks`)\n    }\n    return hardfork\n  }\n\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params\n   */\n  _getHardfork(hardfork: string | Hardfork): any {\n    const hfs = this.hardforks()\n    for (const hf of hfs) {\n      if (hf['name'] === hardfork) return hf\n    }\n    throw new Error(`Hardfork ${hardfork} not defined for chain ${this.chainName()}`)\n  }\n\n  /**\n   * Internal helper function to check if a hardfork is set to be supported by the library\n   * @param hardfork Hardfork name\n   * @returns True if hardfork is supported\n   */\n  _isSupportedHardfork(hardfork: string | Hardfork | null): boolean {\n    if (this._supportedHardforks.length > 0) {\n      for (const supportedHf of this._supportedHardforks) {\n        if (hardfork === supportedHf) return true\n      }\n    } else {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Sets the active EIPs\n   * @param eips\n   */\n  setEIPs(eips: number[] = []) {\n    for (const eip of eips) {\n      if (!(eip in EIPs)) {\n        throw new Error(`${eip} not supported`)\n      }\n      const minHF = this.gteHardfork(EIPs[eip]['minimumHardfork'])\n      if (!minHF) {\n        throw new Error(\n          `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`\n        )\n      }\n      if (EIPs[eip].requiredEIPs) {\n        ;(EIPs[eip].requiredEIPs as number[]).forEach((elem) => {\n          if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n            throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`)\n          }\n        })\n      }\n    }\n    this._eips = eips\n  }\n\n  /**\n   * Returns a parameter for the current chain setup\n   *\n   * If the parameter is present in an EIP, the EIP always takes precendence.\n   * Otherwise the parameter if taken from the latest applied HF with\n   * a change on the respective parameter.\n   *\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @returns The value requested or `null` if not found\n   */\n  param(topic: string, name: string): any {\n    // TODO: consider the case that different active EIPs\n    // can change the same parameter\n    let value = null\n    for (const eip of this._eips) {\n      value = this.paramByEIP(topic, name, eip)\n      if (value !== null) {\n        return value\n      }\n    }\n    return this.paramByHardfork(topic, name, this._hardfork)\n  }\n\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name\n   * @returns The value requested or `null` if not found\n   */\n  paramByHardfork(topic: string, name: string, hardfork: string | Hardfork): any {\n    hardfork = this._chooseHardfork(hardfork)\n\n    let value = null\n    for (const hfChanges of HARDFORK_CHANGES) {\n      // EIP-referencing HF file (e.g. berlin.json)\n      if ('eips' in hfChanges[1]) {\n        const hfEIPs = hfChanges[1]['eips']\n        for (const eip of hfEIPs) {\n          const valueEIP = this.paramByEIP(topic, name, eip)\n          value = valueEIP !== null ? valueEIP : value\n        }\n        // Paramater-inlining HF file (e.g. istanbul.json)\n      } else {\n        if (!hfChanges[1][topic]) {\n          throw new Error(`Topic ${topic} not defined`)\n        }\n        if (hfChanges[1][topic][name] !== undefined) {\n          value = hfChanges[1][topic][name].v\n        }\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return value\n  }\n\n  /**\n   * Returns a parameter corresponding to an EIP\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param eip Number of the EIP\n   * @returns The value requested or `null` if not found\n   */\n  paramByEIP(topic: string, name: string, eip: number): any {\n    if (!(eip in EIPs)) {\n      throw new Error(`${eip} not supported`)\n    }\n\n    const eipParams = EIPs[eip]\n    if (!(topic in eipParams)) {\n      throw new Error(`Topic ${topic} not defined`)\n    }\n    if (eipParams[topic][name] === undefined) {\n      return null\n    }\n    const value = eipParams[topic][name].v\n    return value\n  }\n\n  /**\n   * Returns a parameter for the hardfork active on block number\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   */\n  paramByBlock(topic: string, name: string, blockNumber: BNLike): any {\n    const activeHfs = this.activeHardforks(blockNumber)\n    const hardfork = activeHfs[activeHfs.length - 1]['name']\n    return this.paramByHardfork(topic, name, hardfork)\n  }\n\n  /**\n   * Checks if an EIP is activated by either being included in the EIPs\n   * manually passed in with the {@link CommonOpts.eips} or in a\n   * hardfork currently being active\n   *\n   * Note: this method only works for EIPs being supported\n   * by the {@link CommonOpts.eips} constructor option\n   * @param eip\n   */\n  isActivatedEIP(eip: number): boolean {\n    if (this.eips().includes(eip)) {\n      return true\n    }\n    for (const hfChanges of HARDFORK_CHANGES) {\n      const hf = hfChanges[1]\n      if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n        if (hf['eips'].includes(eip)) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  hardforkIsActiveOnBlock(\n    hardfork: string | Hardfork | null,\n    blockNumber: BNLike,\n    opts: hardforkOptions = {}\n  ): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    const onlySupported = opts.onlySupported ?? false\n    hardfork = this._chooseHardfork(hardfork, onlySupported)\n    const hfBlock = this.hardforkBlockBN(hardfork)\n    if (hfBlock && blockNumber.gte(hfBlock)) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  activeOnBlock(blockNumber: BNLike, opts?: hardforkOptions): boolean {\n    return this.hardforkIsActiveOnBlock(null, blockNumber, opts)\n  }\n\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n  hardforkGteHardfork(\n    hardfork1: string | Hardfork | null,\n    hardfork2: string | Hardfork,\n    opts: hardforkOptions = {}\n  ): boolean {\n    const onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive\n    hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported)\n\n    let hardforks\n    if (onlyActive) {\n      hardforks = this.activeHardforks(null, opts)\n    } else {\n      hardforks = this.hardforks()\n    }\n\n    let posHf1 = -1,\n      posHf2 = -1\n    let index = 0\n    for (const hf of hardforks) {\n      if (hf['name'] === hardfork1) posHf1 = index\n      if (hf['name'] === hardfork2) posHf2 = index\n      index += 1\n    }\n    return posHf1 >= posHf2 && posHf2 !== -1\n  }\n\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @param opts Hardfork options\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n  gteHardfork(hardfork: string | Hardfork, opts?: hardforkOptions): boolean {\n    return this.hardforkGteHardfork(null, hardfork, opts)\n  }\n\n  /**\n   * Checks if given or set hardfork is active on the chain\n   * @param hardfork Hardfork name, optional if HF set\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if hardfork is active on the chain\n   */\n  hardforkIsActiveOnChain(\n    hardfork?: string | Hardfork | null,\n    opts: hardforkOptions = {}\n  ): boolean {\n    const onlySupported = opts.onlySupported ?? false\n    hardfork = this._chooseHardfork(hardfork, onlySupported)\n    for (const hf of this.hardforks()) {\n      if (hf['name'] === hardfork && hf['block'] !== null) return true\n    }\n    return false\n  }\n\n  /**\n   * Returns the active hardfork switches for the current chain\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Array with hardfork arrays\n   */\n  activeHardforks(blockNumber?: BNLike | null, opts: hardforkOptions = {}): HardforkParams[] {\n    const activeHardforks: HardforkParams[] = []\n    const hfs = this.hardforks()\n    for (const hf of hfs) {\n      if (hf['block'] === null) continue\n      if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break\n      if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue\n\n      activeHardforks.push(hf)\n    }\n    return activeHardforks\n  }\n\n  /**\n   * Returns the latest active hardfork name for chain or block or throws if unavailable\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Hardfork name\n   */\n  activeHardfork(blockNumber?: BNLike | null, opts: hardforkOptions = {}): string {\n    const activeHardforks = this.activeHardforks(blockNumber, opts)\n    if (activeHardforks.length > 0) {\n      return activeHardforks[activeHardforks.length - 1]['name']\n    } else {\n      throw new Error(`No (supported) active hardfork found`)\n    }\n  }\n\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   * @deprecated Please use {@link Common.hardforkBlockBN} for large number support\n   */\n  hardforkBlock(hardfork?: string | Hardfork): number | null {\n    const block = this.hardforkBlockBN(hardfork)\n    return toType(block, TypeOutput.Number)\n  }\n\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   */\n  hardforkBlockBN(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const block = this._getHardfork(hardfork)['block']\n    if (block === undefined || block === null) {\n      return null\n    }\n    return new BN(block)\n  }\n\n  /**\n   * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Total difficulty or null if no set\n   */\n  hardforkTD(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const td = this._getHardfork(hardfork)['td']\n    if (td === undefined || td === null) {\n      return null\n    }\n    return new BN(td)\n  }\n\n  /**\n   * True if block number provided is the hardfork (given or set) change block\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n  isHardforkBlock(blockNumber: BNLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    hardfork = this._chooseHardfork(hardfork, false)\n    const block = this.hardforkBlockBN(hardfork)\n    return block ? block.eq(blockNumber) : false\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   * @deprecated Please use {@link Common.nextHardforkBlockBN} for large number support\n   */\n  nextHardforkBlock(hardfork?: string | Hardfork): number | null {\n    const block = this.nextHardforkBlockBN(hardfork)\n    return toType(block, TypeOutput.Number)\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   */\n  nextHardforkBlockBN(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const hfBlock = this.hardforkBlockBN(hardfork)\n    if (hfBlock === null) {\n      return null\n    }\n    // Next fork block number or null if none available\n    // Logic: if accumulator is still null and on the first occurrence of\n    // a block greater than the current hfBlock set the accumulator,\n    // pass on the accumulator as the final result from this time on\n    const nextHfBlock = this.hardforks().reduce((acc: BN | null, hf: HardforkParams) => {\n      const block = new BN(hf.block!)\n      return block.gt(hfBlock) && acc === null ? block : acc\n    }, null)\n    return nextHfBlock\n  }\n\n  /**\n   * True if block number provided is the hardfork change block following the hardfork given or set\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n  isNextHardforkBlock(blockNumber: BNLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    hardfork = this._chooseHardfork(hardfork, false)\n    const nextHardforkBlock = this.nextHardforkBlockBN(hardfork)\n\n    return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber)\n  }\n\n  /**\n   * Internal helper function to calculate a fork hash\n   * @param hardfork Hardfork name\n   * @returns Fork hash as hex string\n   */\n  _calcForkHash(hardfork: string | Hardfork) {\n    const genesis = Buffer.from(this.genesis().hash.substr(2), 'hex')\n\n    let hfBuffer = Buffer.alloc(0)\n    let prevBlock = 0\n    for (const hf of this.hardforks()) {\n      const block = hf.block\n\n      // Skip for chainstart (0), not applied HFs (null) and\n      // when already applied on same block number HFs\n      if (block !== 0 && block !== null && block !== prevBlock) {\n        const hfBlockBuffer = Buffer.from(block.toString(16).padStart(16, '0'), 'hex')\n        hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer])\n      }\n\n      if (hf.name === hardfork) break\n      if (block !== null) {\n        prevBlock = block\n      }\n    }\n    const inputBuffer = Buffer.concat([genesis, hfBuffer])\n\n    // CRC32 delivers result as signed (negative) 32-bit integer,\n    // convert to hex string\n    const forkhash = intToBuffer(crc32Buffer(inputBuffer) >>> 0).toString('hex')\n    return `0x${forkhash}`\n  }\n\n  /**\n   * Returns an eth/64 compliant fork hash (EIP-2124)\n   * @param hardfork Hardfork name, optional if HF set\n   */\n  forkHash(hardfork?: string | Hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const data = this._getHardfork(hardfork)\n    if (data['block'] === null && data['td'] === undefined) {\n      const msg = 'No fork hash calculation possible for future hardfork'\n      throw new Error(msg)\n    }\n    if (data['forkHash'] !== undefined) {\n      return data['forkHash']\n    }\n    return this._calcForkHash(hardfork)\n  }\n\n  /**\n   *\n   * @param forkHash Fork hash as a hex string\n   * @returns Array with hardfork data (name, block, forkHash)\n   */\n  hardforkForForkHash(forkHash: string): any | null {\n    const resArray = this.hardforks().filter((hf: any) => {\n      return hf.forkHash === forkHash\n    })\n    return resArray.length >= 1 ? resArray[resArray.length - 1] : null\n  }\n\n  /**\n   * Returns the Genesis parameters of the current chain\n   * @returns Genesis dictionary\n   */\n  genesis(): GenesisBlock {\n    return this._chainParams['genesis']\n  }\n\n  /**\n   * Returns the Genesis state of the current chain,\n   * all values are provided as hex-prefixed strings.\n   */\n  genesisState(): GenesisState {\n    // Use require statements here in favor of import statements\n    // to load json files on demand\n    // (high memory usage by large mainnet.json genesis state file)\n    switch (this.chainName()) {\n      case 'mainnet':\n        return require('./genesisStates/mainnet.json')\n      case 'ropsten':\n        return require('./genesisStates/ropsten.json')\n      case 'rinkeby':\n        return require('./genesisStates/rinkeby.json')\n      case 'kovan':\n        return require('./genesisStates/kovan.json')\n      case 'goerli':\n        return require('./genesisStates/goerli.json')\n      case 'sepolia':\n        return require('./genesisStates/sepolia.json')\n    }\n\n    // Custom chains with genesis state provided\n    if (\n      this._customChains &&\n      this._customChains.length > 0 &&\n      Array.isArray(this._customChains[0])\n    ) {\n      for (const chainArrayWithGenesis of this._customChains as [IChain, GenesisState][]) {\n        if (chainArrayWithGenesis[0].name === this.chainName()) {\n          return chainArrayWithGenesis[1]\n        }\n      }\n    }\n\n    return {}\n  }\n\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n  hardforks(): HardforkParams[] {\n    return this._chainParams['hardforks']\n  }\n\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n  bootstrapNodes(): BootstrapNode[] {\n    return this._chainParams['bootstrapNodes']\n  }\n\n  /**\n   * Returns DNS networks for the current chain\n   * @returns {String[]} Array of DNS ENR urls\n   */\n  dnsNetworks(): string[] {\n    return this._chainParams['dnsNetworks']!\n  }\n\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n  hardfork(): string | Hardfork {\n    return this._hardfork\n  }\n\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   * @deprecated Please use {@link Common.chainIdBN} for large number support\n   */\n  chainId(): number {\n    return toType(this.chainIdBN(), TypeOutput.Number)\n  }\n\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n  chainIdBN(): BN {\n    return new BN(this._chainParams['chainId'])\n  }\n\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n  chainName(): string {\n    return this._chainParams['name']\n  }\n\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   * @deprecated Please use {@link Common.networkIdBN} for large number support\n   */\n  networkId(): number {\n    return toType(this.networkIdBN(), TypeOutput.Number)\n  }\n\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n  networkIdBN(): BN {\n    return new BN(this._chainParams['networkId'])\n  }\n\n  /**\n   * Returns the active EIPs\n   * @returns List of EIPs\n   */\n  eips(): number[] {\n    return this._eips\n  }\n\n  /**\n   * Returns the consensus type of the network\n   * Possible values: \"pow\"|\"poa\"|\"pos\"\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusType(): string | ConsensusType {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['type']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    return this._chainParams['consensus']!['type']\n  }\n\n  /**\n   * Returns the concrete consensus implementation\n   * algorithm or protocol for the network\n   * e.g. \"ethash\" for \"pow\" consensus type,\n   * \"clique\" for \"poa\" consensus type or\n   * \"casper\" for \"pos\" consensus type.\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusAlgorithm(): string | ConsensusAlgorithm {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['algorithm']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    return this._chainParams['consensus']!['algorithm'] as ConsensusAlgorithm\n  }\n\n  /**\n   * Returns a dictionary with consensus configuration\n   * parameters based on the consensus algorithm\n   *\n   * Expected returns (parameters must be present in\n   * the respective chain json files):\n   *\n   * ethash: -\n   * clique: period, epoch\n   * aura: -\n   * casper: -\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusConfig(): { [key: string]: any } {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // The config parameter is named after the respective consensus algorithm\n        value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']]\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    const consensusAlgorithm = this.consensusAlgorithm()\n    return this._chainParams['consensus']![consensusAlgorithm as ConsensusAlgorithm]\n  }\n\n  /**\n   * Returns a deep copy of this {@link Common} instance.\n   */\n  copy(): Common {\n    const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\n    copy.removeAllListeners()\n    return copy\n  }\n}\n","/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32;\n(function (factory) {\n\t/*jshint ignore:start */\n\t/*eslint-disable */\n\tif(typeof DO_NOT_EXPORT_CRC === 'undefined') {\n\t\tif('object' === typeof exports) {\n\t\t\tfactory(exports);\n\t\t} else if ('function' === typeof define && define.amd) {\n\t\t\tdefine(function () {\n\t\t\t\tvar module = {};\n\t\t\t\tfactory(module);\n\t\t\t\treturn module;\n\t\t\t});\n\t\t} else {\n\t\t\tfactory(CRC32 = {});\n\t\t}\n\t} else {\n\t\tfactory(CRC32 = {});\n\t}\n\t/*eslint-enable */\n\t/*jshint ignore:end */\n}(function(CRC32) {\nCRC32.version = '1.2.2';\n/*global Int32Array */\nfunction signed_crc_table() {\n\tvar c = 0, table = new Array(256);\n\n\tfor(var n =0; n != 256; ++n){\n\t\tc = n;\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\ttable[n] = c;\n\t}\n\n\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n}\n\nvar T0 = signed_crc_table();\nfunction slice_by_16_tables(T) {\n\tvar c = 0, v = 0, n = 0, table = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;\n\n\tfor(n = 0; n != 256; ++n) table[n] = T[n];\n\tfor(n = 0; n != 256; ++n) {\n\t\tv = T[n];\n\t\tfor(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];\n\t}\n\tvar out = [];\n\tfor(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);\n\treturn out;\n}\nvar TT = slice_by_16_tables(T0);\nvar T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];\nvar T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];\nvar Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];\nfunction crc32_bstr(bstr, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_buf(B, seed) {\n\tvar C = seed ^ -1, L = B.length - 15, i = 0;\n\tfor(; i < L;) C =\n\t\tTf[B[i++] ^ (C & 255)] ^\n\t\tTe[B[i++] ^ ((C >> 8) & 255)] ^\n\t\tTd[B[i++] ^ ((C >> 16) & 255)] ^\n\t\tTc[B[i++] ^ (C >>> 24)] ^\n\t\tTb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^\n\t\tT7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^\n\t\tT3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];\n\tL += 15;\n\twhile(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_str(str, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = str.length, c = 0, d = 0; i < L;) {\n\t\tc = str.charCodeAt(i++);\n\t\tif(c < 0x80) {\n\t\t\tC = (C>>>8) ^ T0[(C^c)&0xFF];\n\t\t} else if(c < 0x800) {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++)&1023;\n\t\t\tC = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];\n\t\t} else {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t}\n\t}\n\treturn ~C;\n}\nCRC32.table = T0;\n// $FlowIgnore\nCRC32.bstr = crc32_bstr;\n// $FlowIgnore\nCRC32.buf = crc32_buf;\n// $FlowIgnore\nCRC32.str = crc32_str;\n}));\n"],"names":["_getInitializedChains","customChains","names","chains","mainnet","ropsten","rinkeby","kovan","goerli","sepolia","chain","name_1","name","chainId","toString","exports","require","CustomChain","Hardfork","Chain","ConsensusType","ConsensusAlgorithm","opts","_super","_this","_customChains","_chainParams","setChain","DEFAULT_HARDFORK","defaultHardfork","Istanbul","hardforks","hf","forkHash","_calcForkHash","_hardfork","supportedHardforks","_supportedHardforks","hardfork","setHardfork","eips","setEIPs","__extends","Common","chainParamsOrName","baseChain","standardChainParams","_getChainParams","PolygonMainnet","custom","networkId","PolygonMumbai","ArbitrumRinkebyTestnet","xDaiChain","OptimisticKovan","Berlin","OptimisticEthereum","Error","customChainParams","initializedChains","Boolean","ethereumjs_util_1","isBN","plainCustomChains","this","length","Array","isArray","map","e","param","undefined","_isSupportedHardfork","existing","emit","blockNumber","td","toType","BN","minTdHF","maxTdHF","previousHF","Chainstart","block","gte","msgAdd","hardforkGteHardfork","msg","getHardforkByBlockNumber","onlySupported","hfs","chainName","eip","eips_1","minHF","this_1","gteHardfork","requiredEIPs","forEach","elem","includes","isActivatedEIP","_eips","topic","value","paramByEIP","paramByHardfork","_chooseHardfork","hfChanges","hfEIPs","valueEIP","v","eipParams","activeHfs","activeHardforks","hfBlock","hardforkBlockBN","hardforkIsActiveOnBlock","hardfork1","hardfork2","onlyActive","posHf1","posHf2","index","push","Number","_getHardfork","eq","nextHardforkBlockBN","reduce","acc","gt","nextHardforkBlock","genesis","Buffer","from","hash","substr","hfBuffer","alloc","prevBlock","hfBlockBuffer","padStart","concat","inputBuffer","forkhash","intToBuffer","data","resArray","filter","chainArrayWithGenesis","chainIdBN","networkIdBN","consensusAlgorithm","copy","Object","assign","create","getPrototypeOf","removeAllListeners","events_1","factory","CRC32","version","T0","c","table","n","Int32Array","signed_crc_table","TT","T","out","subarray","slice","slice_by_16_tables","T1","T2","T3","T4","T5","T6","T7","T8","T9","Ta","Tb","Tc","Td","Te","Tf","bstr","seed","C","i","L","charCodeAt","buf","B","str","d","DO_NOT_EXPORT_CRC"],"sourceRoot":""}