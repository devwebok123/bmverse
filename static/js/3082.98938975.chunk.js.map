{"version":3,"file":"static/js/3082.98938975.chunk.js","mappings":"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","sources":["../node_modules/@ethereumjs/tx/src/baseTransaction.ts","../node_modules/@ethereumjs/tx/src/eip1559Transaction.ts","../node_modules/@ethereumjs/tx/src/eip2930Transaction.ts","../node_modules/@ethereumjs/tx/src/index.ts","../node_modules/@ethereumjs/tx/src/legacyTransaction.ts","../node_modules/@ethereumjs/tx/src/transactionFactory.ts","../node_modules/@ethereumjs/tx/src/types.ts","../node_modules/@ethereumjs/tx/src/util.ts"],"sourcesContent":["import Common, { Chain, Hardfork } from '@ethereumjs/common'\nimport {\n  Address,\n  BN,\n  toBuffer,\n  MAX_INTEGER,\n  MAX_UINT64,\n  unpadBuffer,\n  ecsign,\n  publicToAddress,\n  BNLike,\n  bufferToHex,\n} from 'ethereumjs-util'\nimport {\n  TxData,\n  JsonTx,\n  AccessListEIP2930ValuesArray,\n  AccessListEIP2930TxData,\n  FeeMarketEIP1559ValuesArray,\n  FeeMarketEIP1559TxData,\n  TxValuesArray,\n  Capability,\n  TxOptions,\n} from './types'\n\ninterface TransactionCache {\n  hash: Buffer | undefined\n  dataFee?: {\n    value: BN\n    hardfork: string | Hardfork\n  }\n}\n\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nexport abstract class BaseTransaction<TransactionObject> {\n  private readonly _type: number\n\n  public readonly nonce: BN\n  public readonly gasLimit: BN\n  public readonly to?: Address\n  public readonly value: BN\n  public readonly data: Buffer\n\n  public readonly v?: BN\n  public readonly r?: BN\n  public readonly s?: BN\n\n  public readonly common!: Common\n\n  protected cache: TransactionCache = {\n    hash: undefined,\n    dataFee: undefined,\n  }\n\n  protected readonly txOptions: TxOptions\n\n  /**\n   * List of tx type defining EIPs,\n   * e.g. 1559 (fee market) and 2930 (access lists)\n   * for FeeMarketEIP1559Transaction objects\n   */\n  protected activeCapabilities: number[] = []\n\n  /**\n   * The default chain the tx falls back to if no Common\n   * is provided and if the chain can't be derived from\n   * a passed in chainId (only EIP-2718 typed txs) or\n   * EIP-155 signature (legacy txs).\n   *\n   * @hidden\n   */\n  protected DEFAULT_CHAIN = Chain.Mainnet\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK: string | Hardfork = Hardfork.Istanbul\n\n  constructor(txData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData, opts: TxOptions) {\n    const { nonce, gasLimit, to, value, data, v, r, s, type } = txData\n    this._type = new BN(toBuffer(type)).toNumber()\n\n    this.txOptions = opts\n\n    const toB = toBuffer(to === '' ? '0x' : to)\n    const vB = toBuffer(v === '' ? '0x' : v)\n    const rB = toBuffer(r === '' ? '0x' : r)\n    const sB = toBuffer(s === '' ? '0x' : s)\n\n    this.nonce = new BN(toBuffer(nonce === '' ? '0x' : nonce))\n    this.gasLimit = new BN(toBuffer(gasLimit === '' ? '0x' : gasLimit))\n    this.to = toB.length > 0 ? new Address(toB) : undefined\n    this.value = new BN(toBuffer(value === '' ? '0x' : value))\n    this.data = toBuffer(data === '' ? '0x' : data)\n\n    this.v = vB.length > 0 ? new BN(vB) : undefined\n    this.r = rB.length > 0 ? new BN(rB) : undefined\n    this.s = sB.length > 0 ? new BN(sB) : undefined\n\n    this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s })\n\n    // geth limits gasLimit to 2^64-1\n    this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64)\n\n    // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n    this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true)\n  }\n\n  /**\n   * Alias for {@link BaseTransaction.type}\n   *\n   * @deprecated Use `type` instead\n   */\n  get transactionType(): number {\n    return this.type\n  }\n\n  /**\n   * Returns the transaction type.\n   *\n   * Note: legacy txs will return tx type `0`.\n   */\n  get type() {\n    return this._type\n  }\n\n  /**\n   * Checks if a tx type defining capability is active\n   * on a tx, for example the EIP-1559 fee market mechanism\n   * or the EIP-2930 access list feature.\n   *\n   * Note that this is different from the tx type itself,\n   * so EIP-2930 access lists can very well be active\n   * on an EIP-1559 tx for example.\n   *\n   * This method can be useful for feature checks if the\n   * tx type is unknown (e.g. when instantiated with\n   * the tx factory).\n   *\n   * See `Capabilites` in the `types` module for a reference\n   * on all supported capabilities.\n   */\n  supports(capability: Capability) {\n    return this.activeCapabilities.includes(capability)\n  }\n\n  /**\n   * Checks if the transaction has the minimum amount of gas required\n   * (DataFee + TxFee + Creation Fee).\n   */\n  validate(): boolean\n  validate(stringError: false): boolean\n  validate(stringError: true): string[]\n  validate(stringError: boolean = false): boolean | string[] {\n    const errors = []\n\n    if (this.getBaseFee().gt(this.gasLimit)) {\n      errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`)\n    }\n\n    if (this.isSigned() && !this.verifySignature()) {\n      errors.push('Invalid Signature')\n    }\n\n    return stringError ? errors : errors.length === 0\n  }\n\n  /**\n   * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n  getBaseFee(): BN {\n    const fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'))\n    if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n      fee.iaddn(this.common.param('gasPrices', 'txCreation'))\n    }\n    return fee\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    const txDataZero = this.common.param('gasPrices', 'txDataZero')\n    const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero')\n\n    let cost: number | BN = 0\n    for (let i = 0; i < this.data.length; i++) {\n      this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero)\n    }\n\n    cost = new BN(cost)\n    if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n      const dataLength = Math.ceil(this.data.length / 32)\n      const initCodeCost = new BN(this.common.param('gasPrices', 'initCodeWordCost')).imuln(\n        dataLength\n      )\n      cost.iadd(initCodeCost)\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  abstract getUpfrontCost(): BN\n\n  /**\n   * If the tx's `to` is to the creation address\n   */\n  toCreationAddress(): boolean {\n    return this.to === undefined || this.to.buf.length === 0\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of this transaction, in order.\n   *\n   * Use {@link BaseTransaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link BaseTransaction.getMessageToSign}.\n   */\n  abstract raw(): TxValuesArray | AccessListEIP2930ValuesArray | FeeMarketEIP1559ValuesArray\n\n  /**\n   * Returns the encoding of the transaction.\n   */\n  abstract serialize(): Buffer\n\n  // Returns the unsigned tx (hashed or raw), which is used to sign the transaction.\n  //\n  // Note: do not use code docs here since VS Studio is then not able to detect the\n  // comments from the inherited methods\n  abstract getMessageToSign(hashMessage: false): Buffer | Buffer[]\n  abstract getMessageToSign(hashMessage?: true): Buffer\n\n  abstract hash(): Buffer\n\n  abstract getMessageToVerifySignature(): Buffer\n\n  public isSigned(): boolean {\n    const { v, r, s } = this\n    if (this.type === 0) {\n      if (!v || !r || !s) {\n        return false\n      } else {\n        return true\n      }\n    } else {\n      if (v === undefined || !r || !s) {\n        return false\n      } else {\n        return true\n      }\n    }\n  }\n\n  /**\n   * Determines if the signature is valid\n   */\n  verifySignature(): boolean {\n    try {\n      // Main signature verification is done in `getSenderPublicKey()`\n      const publicKey = this.getSenderPublicKey()\n      return unpadBuffer(publicKey).length !== 0\n    } catch (e: any) {\n      return false\n    }\n  }\n\n  /**\n   * Returns the sender's address\n   */\n  getSenderAddress(): Address {\n    return new Address(publicToAddress(this.getSenderPublicKey()))\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  abstract getSenderPublicKey(): Buffer\n\n  /**\n   * Signs a transaction.\n   *\n   * Note that the signed tx is returned as a new object,\n   * use as follows:\n   * ```javascript\n   * const signedTx = tx.sign(privateKey)\n   * ```\n   */\n  sign(privateKey: Buffer): TransactionObject {\n    if (privateKey.length !== 32) {\n      const msg = this._errorMsg('Private key must be 32 bytes in length.')\n      throw new Error(msg)\n    }\n\n    // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n    // and want to recreate a signature (where EIP155 should be applied)\n    // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n    // 2021-06-23\n    let hackApplied = false\n    if (\n      this.type === 0 &&\n      this.common.gteHardfork('spuriousDragon') &&\n      !this.supports(Capability.EIP155ReplayProtection)\n    ) {\n      this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n      hackApplied = true\n    }\n\n    const msgHash = this.getMessageToSign(true)\n    const { v, r, s } = ecsign(msgHash, privateKey)\n    const tx = this._processSignature(v, r, s)\n\n    // Hack part 2\n    if (hackApplied) {\n      const index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection)\n      if (index > -1) {\n        this.activeCapabilities.splice(index, 1)\n      }\n    }\n\n    return tx\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  abstract toJSON(): JsonTx\n\n  // Accept the v,r,s values from the `sign` method, and convert this into a TransactionObject\n  protected abstract _processSignature(v: number, r: Buffer, s: Buffer): TransactionObject\n\n  /**\n   * Does chain ID checks on common and returns a common\n   * to be used on instantiation\n   * @hidden\n   *\n   * @param common - {@link Common} instance from tx options\n   * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n   */\n  protected _getCommon(common?: Common, chainId?: BNLike) {\n    // Chain ID provided\n    if (chainId) {\n      const chainIdBN = new BN(toBuffer(chainId))\n      if (common) {\n        if (!common.chainIdBN().eq(chainIdBN)) {\n          const msg = this._errorMsg('The chain ID does not match the chain ID of Common')\n          throw new Error(msg)\n        }\n        // Common provided, chain ID does match\n        // -> Return provided Common\n        return common.copy()\n      } else {\n        if (Common.isSupportedChainId(chainIdBN)) {\n          // No Common, chain ID supported by Common\n          // -> Instantiate Common with chain ID\n          return new Common({ chain: chainIdBN, hardfork: this.DEFAULT_HARDFORK })\n        } else {\n          // No Common, chain ID not supported by Common\n          // -> Instantiate custom Common derived from DEFAULT_CHAIN\n          return Common.forCustomChain(\n            this.DEFAULT_CHAIN,\n            {\n              name: 'custom-chain',\n              networkId: chainIdBN,\n              chainId: chainIdBN,\n            },\n            this.DEFAULT_HARDFORK\n          )\n        }\n      }\n    } else {\n      // No chain ID provided\n      // -> return Common provided or create new default Common\n      return (\n        common?.copy() ?? new Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK })\n      )\n    }\n  }\n\n  /**\n   * Validates that an object with BN values cannot exceed the specified bit limit.\n   * @param values Object containing string keys and BN values\n   * @param bits Number of bits to check (64 or 256)\n   * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n   */\n  protected _validateCannotExceedMaxInteger(\n    values: { [key: string]: BN | undefined },\n    bits = 256,\n    cannotEqual = false\n  ) {\n    for (const [key, value] of Object.entries(values)) {\n      switch (bits) {\n        case 64:\n          if (cannotEqual) {\n            if (value?.gte(MAX_UINT64)) {\n              const msg = this._errorMsg(\n                `${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          } else {\n            if (value?.gt(MAX_UINT64)) {\n              const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`)\n              throw new Error(msg)\n            }\n          }\n          break\n        case 256:\n          if (cannotEqual) {\n            if (value?.gte(MAX_INTEGER)) {\n              const msg = this._errorMsg(\n                `${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          } else {\n            if (value?.gt(MAX_INTEGER)) {\n              const msg = this._errorMsg(\n                `${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          }\n          break\n        default: {\n          const msg = this._errorMsg('unimplemented bits value')\n          throw new Error(msg)\n        }\n      }\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public abstract errorStr(): string\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected abstract _errorMsg(msg: string): string\n\n  /**\n   * Returns the shared error postfix part for _error() method\n   * tx type implementations.\n   */\n  protected _getSharedErrorPostfix() {\n    let hash = ''\n    try {\n      hash = this.isSigned() ? bufferToHex(this.hash()) : 'not available (unsigned)'\n    } catch (e: any) {\n      hash = 'error'\n    }\n    let isSigned = ''\n    try {\n      isSigned = this.isSigned().toString()\n    } catch (e: any) {\n      hash = 'error'\n    }\n    let hf = ''\n    try {\n      hf = this.common.hardfork()\n    } catch (e: any) {\n      hf = 'error'\n    }\n\n    let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `\n    postfix += `signed=${isSigned} hf=${hf}`\n\n    return postfix\n  }\n}\n","import {\n  BN,\n  bnToHex,\n  bnToUnpaddedBuffer,\n  ecrecover,\n  keccak256,\n  MAX_INTEGER,\n  rlp,\n  toBuffer,\n  validateNoLeadingZeroes,\n} from 'ethereumjs-util'\nimport Common from '@ethereumjs/common'\nimport { BaseTransaction } from './baseTransaction'\nimport {\n  AccessList,\n  AccessListBuffer,\n  FeeMarketEIP1559TxData,\n  FeeMarketEIP1559ValuesArray,\n  JsonTx,\n  N_DIV_2,\n  TxOptions,\n} from './types'\nimport { AccessLists, checkMaxInitCodeSize } from './util'\n\nconst TRANSACTION_TYPE = 2\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex')\n\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nexport default class FeeMarketEIP1559Transaction extends BaseTransaction<FeeMarketEIP1559Transaction> {\n  public readonly chainId: BN\n  public readonly accessList: AccessListBuffer\n  public readonly AccessListJSON: AccessList\n  public readonly maxPriorityFeePerGas: BN\n  public readonly maxFeePerGas: BN\n\n  public readonly common: Common\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK = 'london'\n\n  /**\n   * EIP-2930 alias for `r`\n   *\n   * @deprecated use `r` instead\n   */\n  get senderR() {\n    return this.r\n  }\n\n  /**\n   * EIP-2930 alias for `s`\n   *\n   * @deprecated use `s` instead\n   */\n  get senderS() {\n    return this.s\n  }\n\n  /**\n   * EIP-2930 alias for `v`\n   *\n   * @deprecated use `v` instead\n   */\n  get yParity() {\n    return this.v\n  }\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n    return new FeeMarketEIP1559Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\n        `Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n          .slice(0, 1)\n          .toString('hex')}`\n      )\n    }\n\n    const values = rlp.decode(serialized.slice(1))\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array')\n    }\n\n    return FeeMarketEIP1559Transaction.fromValuesArray(values as any, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor\n   */\n  public static fromRlpSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n  public static fromValuesArray(values: FeeMarketEIP1559ValuesArray, opts: TxOptions = {}) {\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error(\n        'Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).'\n      )\n    }\n\n    const [\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList,\n      v,\n      r,\n      s,\n    ] = values\n\n    validateNoLeadingZeroes({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s })\n\n    return new FeeMarketEIP1559Transaction(\n      {\n        chainId: new BN(chainId),\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gasLimit,\n        to,\n        value,\n        data,\n        accessList: accessList ?? [],\n        v: v !== undefined ? new BN(v) : undefined, // EIP2930 supports v's with value 0 (empty Buffer)\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE }, opts)\n    const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData\n\n    this.common = this._getCommon(opts.common, chainId)\n    this.chainId = this.common.chainIdBN()\n\n    if (!this.common.isActivatedEIP(1559)) {\n      throw new Error('EIP-1559 not enabled on Common')\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930])\n\n    // Populate the access list fields\n    const accessListData = AccessLists.getAccessListData(accessList ?? [])\n    this.accessList = accessListData.accessList\n    this.AccessListJSON = accessListData.AccessListJSON\n    // Verify the access list format.\n    AccessLists.verifyAccessList(this.accessList)\n\n    this.maxFeePerGas = new BN(toBuffer(maxFeePerGas === '' ? '0x' : maxFeePerGas))\n    this.maxPriorityFeePerGas = new BN(\n      toBuffer(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas)\n    )\n\n    this._validateCannotExceedMaxInteger({\n      maxFeePerGas: this.maxFeePerGas,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n    })\n\n    if (this.gasLimit.mul(this.maxFeePerGas).gt(MAX_INTEGER)) {\n      const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)')\n      throw new Error(msg)\n    }\n\n    if (this.maxFeePerGas.lt(this.maxPriorityFeePerGas)) {\n      const msg = this._errorMsg(\n        'maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)'\n      )\n      throw new Error(msg)\n    }\n\n    if (this.v && !this.v.eqn(0) && !this.v.eqn(1)) {\n      const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1')\n      throw new Error(msg)\n    }\n\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    if (this.common.isActivatedEIP(3860)) {\n      checkMaxInitCodeSize(this.common, this.data.length)\n    }\n\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    const cost = super.getDataFee()\n    cost.iaddn(AccessLists.getDataFeeEIP2930(this.accessList, this.common))\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n  getUpfrontCost(baseFee: BN = new BN(0)): BN {\n    const inclusionFeePerGas = BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee))\n    const gasPrice = inclusionFeePerGas.add(baseFee)\n    return this.gasLimit.mul(gasPrice).add(this.value)\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n   */\n  raw(): FeeMarketEIP1559ValuesArray {\n    return [\n      bnToUnpaddedBuffer(this.chainId),\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.maxPriorityFeePerGas),\n      bnToUnpaddedBuffer(this.maxFeePerGas),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n      this.accessList,\n      this.v !== undefined ? bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize(): Buffer {\n    const base = this.raw()\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n  }\n\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true): Buffer {\n    const base = this.raw().slice(0, 9)\n    const message = Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n    if (hashMessage) {\n      return keccak256(message)\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  public hash(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(this.serialize())\n      }\n      return this.cache.hash\n    }\n\n    return keccak256(this.serialize())\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  public getMessageToVerifySignature(): Buffer {\n    return this.getMessageToSign()\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  public getSenderPublicKey(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    const msgHash = this.getMessageToVerifySignature()\n\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    const { v, r, s } = this\n    try {\n      return ecrecover(\n        msgHash,\n        v!.addn(27), // Recover the 27 which was stripped from ecsign\n        bnToUnpaddedBuffer(r!),\n        bnToUnpaddedBuffer(s!)\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  _processSignature(v: number, r: Buffer, s: Buffer) {\n    const opts = { ...this.txOptions, common: this.common }\n\n    return FeeMarketEIP1559Transaction.fromTxData(\n      {\n        chainId: this.chainId,\n        nonce: this.nonce,\n        maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        maxFeePerGas: this.maxFeePerGas,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        accessList: this.accessList,\n        v: new BN(v - 27), // This looks extremely hacky: ethereumjs-util actually adds 27 to the value, the recovery bit is either 0 or 1.\n        r: new BN(r),\n        s: new BN(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON(): JsonTx {\n    const accessListJSON = AccessLists.getAccessListJSON(this.accessList)\n\n    return {\n      chainId: bnToHex(this.chainId),\n      nonce: bnToHex(this.nonce),\n      maxPriorityFeePerGas: bnToHex(this.maxPriorityFeePerGas),\n      maxFeePerGas: bnToHex(this.maxFeePerGas),\n      gasLimit: bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? bnToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","import {\n  BN,\n  bnToHex,\n  bnToUnpaddedBuffer,\n  ecrecover,\n  keccak256,\n  MAX_INTEGER,\n  rlp,\n  toBuffer,\n  validateNoLeadingZeroes,\n} from 'ethereumjs-util'\nimport Common from '@ethereumjs/common'\nimport { BaseTransaction } from './baseTransaction'\nimport {\n  AccessList,\n  AccessListBuffer,\n  AccessListEIP2930TxData,\n  AccessListEIP2930ValuesArray,\n  JsonTx,\n  TxOptions,\n  N_DIV_2,\n} from './types'\n\nimport { AccessLists, checkMaxInitCodeSize } from './util'\n\nconst TRANSACTION_TYPE = 1\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex')\n\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nexport default class AccessListEIP2930Transaction extends BaseTransaction<AccessListEIP2930Transaction> {\n  public readonly chainId: BN\n  public readonly accessList: AccessListBuffer\n  public readonly AccessListJSON: AccessList\n  public readonly gasPrice: BN\n\n  public readonly common: Common\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK = 'berlin'\n\n  /**\n   * EIP-2930 alias for `r`\n   *\n   * @deprecated use `r` instead\n   */\n  get senderR() {\n    return this.r\n  }\n\n  /**\n   * EIP-2930 alias for `s`\n   *\n   * @deprecated use `s` instead\n   */\n  get senderS() {\n    return this.s\n  }\n\n  /**\n   * EIP-2930 alias for `v`\n   *\n   * @deprecated use `v` instead\n   */\n  get yParity() {\n    return this.v\n  }\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n    return new AccessListEIP2930Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\n        `Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n          .slice(0, 1)\n          .toString('hex')}`\n      )\n    }\n\n    const values = rlp.decode(serialized.slice(1))\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array')\n    }\n\n    return AccessListEIP2930Transaction.fromValuesArray(values as any, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\n   */\n  public static fromRlpSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   */\n  public static fromValuesArray(values: AccessListEIP2930ValuesArray, opts: TxOptions = {}) {\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error(\n        'Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).'\n      )\n    }\n\n    const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values\n\n    validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s })\n\n    const emptyAccessList: AccessList = []\n\n    return new AccessListEIP2930Transaction(\n      {\n        chainId: new BN(chainId),\n        nonce,\n        gasPrice,\n        gasLimit,\n        to,\n        value,\n        data,\n        accessList: accessList ?? emptyAccessList,\n        v: v !== undefined ? new BN(v) : undefined, // EIP2930 supports v's with value 0 (empty Buffer)\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE }, opts)\n    const { chainId, accessList, gasPrice } = txData\n\n    this.common = this._getCommon(opts.common, chainId)\n    this.chainId = this.common.chainIdBN()\n\n    // EIP-2718 check is done in Common\n    if (!this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common')\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([2718, 2930])\n\n    // Populate the access list fields\n    const accessListData = AccessLists.getAccessListData(accessList ?? [])\n    this.accessList = accessListData.accessList\n    this.AccessListJSON = accessListData.AccessListJSON\n    // Verify the access list format.\n    AccessLists.verifyAccessList(this.accessList)\n\n    this.gasPrice = new BN(toBuffer(gasPrice === '' ? '0x' : gasPrice))\n\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice,\n    })\n\n    if (this.gasPrice.mul(this.gasLimit).gt(MAX_INTEGER)) {\n      const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER')\n      throw new Error(msg)\n    }\n    if (this.v && !this.v.eqn(0) && !this.v.eqn(1)) {\n      const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1')\n      throw new Error(msg)\n    }\n\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    if (this.common.isActivatedEIP(3860)) {\n      checkMaxInitCodeSize(this.common, this.data.length)\n    }\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    const cost = super.getDataFee()\n    cost.iaddn(AccessLists.getDataFeeEIP2930(this.accessList, this.common))\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost(): BN {\n    return this.gasLimit.mul(this.gasPrice).add(this.value)\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   *\n   * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n   */\n  raw(): AccessListEIP2930ValuesArray {\n    return [\n      bnToUnpaddedBuffer(this.chainId),\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.gasPrice),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n      this.accessList,\n      this.v !== undefined ? bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the EIP-2930 transaction.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize(): Buffer {\n    const base = this.raw()\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n  }\n\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true): Buffer {\n    const base = this.raw().slice(0, 8)\n    const message = Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n    if (hashMessage) {\n      return keccak256(message)\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  public hash(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(this.serialize())\n      }\n      return this.cache.hash\n    }\n\n    return keccak256(this.serialize())\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  public getMessageToVerifySignature(): Buffer {\n    return this.getMessageToSign()\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  public getSenderPublicKey(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    const msgHash = this.getMessageToVerifySignature()\n\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    const { yParity, r, s } = this\n    try {\n      return ecrecover(\n        msgHash,\n        yParity!.addn(27), // Recover the 27 which was stripped from ecsign\n        bnToUnpaddedBuffer(r!),\n        bnToUnpaddedBuffer(s!)\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  _processSignature(v: number, r: Buffer, s: Buffer) {\n    const opts = { ...this.txOptions, common: this.common }\n\n    return AccessListEIP2930Transaction.fromTxData(\n      {\n        chainId: this.chainId,\n        nonce: this.nonce,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        accessList: this.accessList,\n        v: new BN(v - 27), // This looks extremely hacky: ethereumjs-util actually adds 27 to the value, the recovery bit is either 0 or 1.\n        r: new BN(r),\n        s: new BN(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON(): JsonTx {\n    const accessListJSON = AccessLists.getAccessListJSON(this.accessList)\n\n    return {\n      chainId: bnToHex(this.chainId),\n      nonce: bnToHex(this.nonce),\n      gasPrice: bnToHex(this.gasPrice),\n      gasLimit: bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? bnToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n    errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","export { default as Transaction } from './legacyTransaction'\nexport { default as AccessListEIP2930Transaction } from './eip2930Transaction'\nexport { default as TransactionFactory } from './transactionFactory'\nexport { default as FeeMarketEIP1559Transaction } from './eip1559Transaction'\nexport * from './types'\n","import {\n  BN,\n  bnToHex,\n  bnToUnpaddedBuffer,\n  ecrecover,\n  MAX_INTEGER,\n  rlp,\n  rlphash,\n  toBuffer,\n  unpadBuffer,\n  validateNoLeadingZeroes,\n} from 'ethereumjs-util'\nimport { TxOptions, TxData, JsonTx, N_DIV_2, TxValuesArray, Capability } from './types'\nimport { BaseTransaction } from './baseTransaction'\nimport Common from '@ethereumjs/common'\nimport { checkMaxInitCodeSize } from './util'\n\nconst TRANSACTION_TYPE = 0\n\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nexport default class Transaction extends BaseTransaction<Transaction> {\n  public readonly gasPrice: BN\n\n  public readonly common: Common\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: TxData, opts: TxOptions = {}) {\n    return new Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    const values = rlp.decode(serialized)\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array')\n    }\n\n    return this.fromValuesArray(values, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link Transaction.fromSerializedTx})\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link Transaction.fromSerializedTx} constructor\n   */\n  public static fromRlpSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    return Transaction.fromSerializedTx(serialized, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n  public static fromValuesArray(values: TxValuesArray, opts: TxOptions = {}) {\n    // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error(\n        'Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).'\n      )\n    }\n\n    const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values\n\n    validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s })\n\n    return new Transaction(\n      {\n        nonce,\n        gasPrice,\n        gasLimit,\n        to,\n        value,\n        data,\n        v,\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE }, opts)\n\n    this.common = this._validateTxV(this.v, opts.common)\n\n    this.gasPrice = new BN(toBuffer(txData.gasPrice === '' ? '0x' : txData.gasPrice))\n\n    if (this.gasPrice.mul(this.gasLimit).gt(MAX_INTEGER)) {\n      const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)')\n      throw new Error(msg)\n    }\n    this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice })\n\n    if (this.common.gteHardfork('spuriousDragon')) {\n      if (!this.isSigned()) {\n        this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        const v = this.v!\n        const chainIdDoubled = this.common.chainIdBN().muln(2)\n\n        // v and chain ID meet EIP-155 conditions\n        if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n          this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n        }\n      }\n    }\n\n    if (this.common.isActivatedEIP(3860)) {\n      checkMaxInitCodeSize(this.common, this.data.length)\n    }\n\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n  raw(): TxValuesArray {\n    return [\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.gasPrice),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n      this.v !== undefined ? bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n  serialize(): Buffer {\n    return rlp.encode(this.raw())\n  }\n\n  private _getMessageToSign() {\n    const values = [\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.gasPrice),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n    ]\n\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      values.push(toBuffer(this.common.chainIdBN()))\n      values.push(unpadBuffer(toBuffer(0)))\n      values.push(unpadBuffer(toBuffer(0)))\n    }\n\n    return values\n  }\n\n  /**\n   * Returns the unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: the raw message message format for the legacy tx is not RLP encoded\n   * and you might need to do yourself with:\n   *\n   * ```javascript\n   * import { rlp } from 'ethereumjs-util'\n   * const message = tx.getMessageToSign(false)\n   * const serializedMessage = rlp.encode(message) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage: false): Buffer[]\n  getMessageToSign(hashMessage?: true): Buffer\n  getMessageToSign(hashMessage = true) {\n    const message = this._getMessageToSign()\n    if (hashMessage) {\n      return rlphash(message)\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: super.getDataFee(),\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return super.getDataFee()\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost(): BN {\n    return this.gasLimit.mul(this.gasPrice).add(this.value)\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash(): Buffer {\n    // In contrast to the tx type transaction implementations the `hash()` function\n    // for the legacy tx does not throw if the tx is not signed.\n    // This has been considered for inclusion but lead to unexpected backwards\n    // compatibility problems (no concrete reference found, needs validation).\n    //\n    // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,\n    // September, 2021 as well as work done before.\n    //\n    // This should be updated along the next major version release by adding:\n    //\n    //if (!this.isSigned()) {\n    //  const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n    //  throw new Error(msg)\n    //}\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = rlphash(this.raw())\n      }\n      return this.cache.hash\n    }\n\n    return rlphash(this.raw())\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed')\n      throw new Error(msg)\n    }\n    const message = this._getMessageToSign()\n    return rlphash(message)\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey(): Buffer {\n    const msgHash = this.getMessageToVerifySignature()\n\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    const { v, r, s } = this\n    try {\n      return ecrecover(\n        msgHash,\n        v!,\n        bnToUnpaddedBuffer(r!),\n        bnToUnpaddedBuffer(s!),\n        this.supports(Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n  protected _processSignature(v: number, r: Buffer, s: Buffer) {\n    const vBN = new BN(v)\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      vBN.iadd(this.common.chainIdBN().muln(2).addn(8))\n    }\n\n    const opts = { ...this.txOptions, common: this.common }\n\n    return Transaction.fromTxData(\n      {\n        nonce: this.nonce,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        v: vBN,\n        r: new BN(r),\n        s: new BN(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n  toJSON(): JsonTx {\n    return {\n      nonce: bnToHex(this.nonce),\n      gasPrice: bnToHex(this.gasPrice),\n      gasLimit: bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? bnToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Validates tx's `v` value\n   */\n  private _validateTxV(v?: BN, common?: Common): Common {\n    // Check for valid v values in the scope of a signed legacy tx\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v.ltn(37) && !v.eqn(27) && !v.eqn(28)) {\n        throw new Error(\n          `Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`\n        )\n      }\n    }\n\n    let chainIdBN\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (\n      v !== undefined &&\n      (!common || common.gteHardfork('spuriousDragon')) &&\n      !v.eqn(27) &&\n      !v.eqn(28)\n    ) {\n      if (common) {\n        const chainIdDoubled = common.chainIdBN().muln(2)\n        const isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))\n\n        if (!isValidEIP155V) {\n          throw new Error(\n            `Incompatible EIP155-based V ${v} and chain id ${common.chainIdBN()}. See the Common parameter of the Transaction constructor to set the chain id.`\n          )\n        }\n      } else {\n        // Derive the original chain ID\n        let numSub\n        if (v.subn(35).isEven()) {\n          numSub = 35\n        } else {\n          numSub = 36\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBN = v.subn(numSub).divn(2)\n      }\n    }\n    return this._getCommon(common, chainIdBN)\n  }\n\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  private _unsignedTxImplementsEIP155() {\n    return this.common.gteHardfork('spuriousDragon')\n  }\n\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  private _signedTxImplementsEIP155() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed')\n      throw new Error(msg)\n    }\n    const onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon')\n\n    // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n    const v = this.v!\n\n    const chainIdDoubled = this.common.chainIdBN().muln(2)\n\n    const vAndChainIdMeetEIP155Conditions =\n      v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))\n\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    errorStr += ` gasPrice=${this.gasPrice}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","import { BN, toBuffer } from 'ethereumjs-util'\nimport {\n  TxOptions,\n  TypedTransaction,\n  TxData,\n  AccessListEIP2930TxData,\n  FeeMarketEIP1559TxData,\n} from './types'\nimport { Transaction, AccessListEIP2930Transaction, FeeMarketEIP1559Transaction } from '.'\nimport Common from '@ethereumjs/common'\n\nexport default class TransactionFactory {\n  // It is not possible to instantiate a TransactionFactory object.\n  private constructor() {}\n\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n  public static fromTxData(\n    txData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData,\n    txOptions: TxOptions = {}\n  ): TypedTransaction {\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return Transaction.fromTxData(<TxData>txData, txOptions)\n    } else {\n      const txType = new BN(toBuffer(txData.type)).toNumber()\n      if (txType === 0) {\n        return Transaction.fromTxData(<TxData>txData, txOptions)\n      } else if (txType === 1) {\n        return AccessListEIP2930Transaction.fromTxData(<AccessListEIP2930TxData>txData, txOptions)\n      } else if (txType === 2) {\n        return FeeMarketEIP1559Transaction.fromTxData(<FeeMarketEIP1559TxData>txData, txOptions)\n      } else {\n        throw new Error(`Tx instantiation with type ${txType} not supported`)\n      }\n    }\n  }\n\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Buffer\n   * @param txOptions - The transaction options\n   */\n  public static fromSerializedData(data: Buffer, txOptions: TxOptions = {}): TypedTransaction {\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      let EIP: number\n      switch (data[0]) {\n        case 1:\n          EIP = 2930\n          break\n        case 2:\n          EIP = 1559\n          break\n        default:\n          throw new Error(`TypedTransaction with ID ${data[0]} unknown`)\n      }\n      if (EIP === 1559) {\n        return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions)\n      } else {\n        // EIP === 2930\n        return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions)\n      }\n    } else {\n      return Transaction.fromSerializedTx(data, txOptions)\n    }\n  }\n\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Buffer[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Buffer or Buffer[]\n   * @param txOptions - The transaction options\n   */\n  public static fromBlockBodyData(data: Buffer | Buffer[], txOptions: TxOptions = {}) {\n    if (Buffer.isBuffer(data)) {\n      return this.fromSerializedData(data, txOptions)\n    } else if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return Transaction.fromValuesArray(data, txOptions)\n    } else {\n      throw new Error('Cannot decode transaction: unknown type input')\n    }\n  }\n\n  /**\n   * This helper method allows one to retrieve the class which matches the transactionID\n   * If transactionID is undefined, returns the legacy transaction class.\n   * @deprecated - This method is deprecated and will be removed on the next major release\n   * @param transactionID\n   * @param _common - This option is not used\n   */\n  public static getTransactionClass(transactionID: number = 0, _common?: Common) {\n    const legacyTxn = transactionID == 0 || (transactionID >= 0x80 && transactionID <= 0xff)\n\n    if (legacyTxn) {\n      return Transaction\n    }\n\n    switch (transactionID) {\n      case 1:\n        return AccessListEIP2930Transaction\n      case 2:\n        return FeeMarketEIP1559Transaction\n      default:\n        throw new Error(`TypedTransaction with ID ${transactionID} unknown`)\n    }\n  }\n}\n","import { BN, AddressLike, BNLike, BufferLike, PrefixedHexString } from 'ethereumjs-util'\nimport Common from '@ethereumjs/common'\nimport { default as Transaction } from './legacyTransaction'\nimport { default as AccessListEIP2930Transaction } from './eip2930Transaction'\nimport { default as FeeMarketEIP1559Transaction } from './eip1559Transaction'\n\n/**\n * Can be used in conjunction with {@link Transaction.supports}\n * to query on tx capabilities\n */\nexport enum Capability {\n  /**\n   * Tx supports EIP-155 replay protection\n   * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n   */\n  EIP155ReplayProtection = 155,\n\n  /**\n   * Tx supports EIP-1559 gas fee market mechansim\n   * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n   */\n  EIP1559FeeMarket = 1559,\n\n  /**\n   * Tx is a typed transaction as defined in EIP-2718\n   * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n   */\n  EIP2718TypedTransaction = 2718,\n\n  /**\n   * Tx supports access list generation as defined in EIP-2930\n   * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n   */\n  EIP2930AccessLists = 2930,\n}\n\n/**\n * The options for initializing a {@link Transaction}.\n */\nexport interface TxOptions {\n  /**\n   * A {@link Common} object defining the chain and hardfork for the transaction.\n   *\n   * Object will be internally copied so that tx behavior don't incidentally\n   * change on future HF changes.\n   *\n   * Default: {@link Common} object set to `mainnet` and the default hardfork as defined in the {@link Common} class.\n   *\n   * Current default hardfork: `istanbul`\n   */\n  common?: Common\n  /**\n   * A transaction object by default gets frozen along initialization. This gives you\n   * strong additional security guarantees on the consistency of the tx parameters.\n   * It also enables tx hash caching when the `hash()` method is called multiple times.\n   *\n   * If you need to deactivate the tx freeze - e.g. because you want to subclass tx and\n   * add additional properties - it is strongly encouraged that you do the freeze yourself\n   * within your code instead.\n   *\n   * Default: true\n   */\n  freeze?: boolean\n}\n\n/*\n * Access List types\n */\n\nexport type AccessListItem = {\n  address: PrefixedHexString\n  storageKeys: PrefixedHexString[]\n}\n\n/*\n * An Access List as a tuple of [address: Buffer, storageKeys: Buffer[]]\n */\nexport type AccessListBufferItem = [Buffer, Buffer[]]\nexport type AccessListBuffer = AccessListBufferItem[]\nexport type AccessList = AccessListItem[]\n\nexport function isAccessListBuffer(\n  input: AccessListBuffer | AccessList\n): input is AccessListBuffer {\n  if (input.length === 0) {\n    return true\n  }\n  const firstItem = input[0]\n  if (Array.isArray(firstItem)) {\n    return true\n  }\n  return false\n}\n\nexport function isAccessList(input: AccessListBuffer | AccessList): input is AccessList {\n  return !isAccessListBuffer(input) // This is exactly the same method, except the output is negated.\n}\n\n/**\n * Encompassing type for all transaction types.\n *\n * Note that this also includes legacy txs which are\n * referenced as {@link Transaction} for compatibility reasons.\n */\nexport type TypedTransaction =\n  | Transaction\n  | AccessListEIP2930Transaction\n  | FeeMarketEIP1559Transaction\n\n/**\n * Legacy {@link Transaction} Data\n */\nexport type TxData = {\n  /**\n   * The transaction's nonce.\n   */\n  nonce?: BNLike\n\n  /**\n   * The transaction's gas price.\n   */\n  gasPrice?: BNLike\n\n  /**\n   * The transaction's gas limit.\n   */\n  gasLimit?: BNLike\n\n  /**\n   * The transaction's the address is sent to.\n   */\n  to?: AddressLike\n\n  /**\n   * The amount of Ether sent.\n   */\n  value?: BNLike\n\n  /**\n   * This will contain the data of the message or the init of a contract.\n   */\n  data?: BufferLike\n\n  /**\n   * EC recovery ID.\n   */\n  v?: BNLike\n\n  /**\n   * EC signature parameter.\n   */\n  r?: BNLike\n\n  /**\n   * EC signature parameter.\n   */\n  s?: BNLike\n\n  /**\n   * The transaction type\n   */\n\n  type?: BNLike\n}\n\n/**\n * {@link AccessListEIP2930Transaction} data.\n */\nexport interface AccessListEIP2930TxData extends TxData {\n  /**\n   * The transaction's chain ID\n   */\n  chainId?: BNLike\n\n  /**\n   * The access list which contains the addresses/storage slots which the transaction wishes to access\n   */\n  accessList?: AccessListBuffer | AccessList\n}\n\n/**\n * {@link FeeMarketEIP1559Transaction} data.\n */\nexport interface FeeMarketEIP1559TxData extends AccessListEIP2930TxData {\n  /**\n   * The transaction's gas price, inherited from {@link Transaction}.  This property is not used for EIP1559\n   * transactions and should always be undefined for this specific transaction type.\n   */\n  gasPrice?: never\n  /**\n   * The maximum inclusion fee per gas (this fee is given to the miner)\n   */\n  maxPriorityFeePerGas?: BNLike\n  /**\n   * The maximum total fee\n   */\n  maxFeePerGas?: BNLike\n}\n\n/**\n * Buffer values array for a legacy {@link Transaction}\n */\nexport type TxValuesArray = Buffer[]\n\n/**\n * Buffer values array for an {@link AccessListEIP2930Transaction}\n */\nexport type AccessListEIP2930ValuesArray = [\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  AccessListBuffer,\n  Buffer?,\n  Buffer?,\n  Buffer?\n]\n\n/**\n * Buffer values array for a {@link FeeMarketEIP1559Transaction}\n */\nexport type FeeMarketEIP1559ValuesArray = [\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  AccessListBuffer,\n  Buffer?,\n  Buffer?,\n  Buffer?\n]\n\ntype JsonAccessListItem = { address: string; storageKeys: string[] }\n\n/**\n * Generic interface for all tx types with a\n * JSON representation of a transaction.\n *\n * Note that all values are marked as optional\n * and not all the values are present on all tx types\n * (an EIP1559 tx e.g. lacks a `gasPrice`).\n */\nexport interface JsonTx {\n  nonce?: string\n  gasPrice?: string\n  gasLimit?: string\n  to?: string\n  data?: string\n  v?: string\n  r?: string\n  s?: string\n  value?: string\n  chainId?: string\n  accessList?: JsonAccessListItem[]\n  type?: string\n  maxPriorityFeePerGas?: string\n  maxFeePerGas?: string\n}\n\n/**\n * A const defining secp256k1n/2\n */\nexport const N_DIV_2 = new BN(\n  '7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0',\n  16\n)\n","import Common from '@ethereumjs/common'\nimport { bufferToHex, setLengthLeft, toBuffer } from 'ethereumjs-util'\nimport { AccessList, AccessListBuffer, AccessListItem, isAccessList } from './types'\n\nexport function checkMaxInitCodeSize(common: Common, length: number) {\n  if (length > common.param('vm', 'maxInitCodeSize')) {\n    throw new Error(\n      `the initcode size of this transaction is too large: it is ${length} while the max is ${common.param(\n        'vm',\n        'maxInitCodeSize'\n      )}`\n    )\n  }\n}\n\nexport class AccessLists {\n  public static getAccessListData(accessList: AccessListBuffer | AccessList) {\n    let AccessListJSON\n    let bufferAccessList\n    if (accessList && isAccessList(accessList)) {\n      AccessListJSON = accessList\n      const newAccessList: AccessListBuffer = []\n\n      for (let i = 0; i < accessList.length; i++) {\n        const item: AccessListItem = accessList[i]\n        const addressBuffer = toBuffer(item.address)\n        const storageItems: Buffer[] = []\n        for (let index = 0; index < item.storageKeys.length; index++) {\n          storageItems.push(toBuffer(item.storageKeys[index]))\n        }\n        newAccessList.push([addressBuffer, storageItems])\n      }\n      bufferAccessList = newAccessList\n    } else {\n      bufferAccessList = accessList ?? []\n      // build the JSON\n      const json: AccessList = []\n      for (let i = 0; i < bufferAccessList.length; i++) {\n        const data = bufferAccessList[i]\n        const address = bufferToHex(data[0])\n        const storageKeys: string[] = []\n        for (let item = 0; item < data[1].length; item++) {\n          storageKeys.push(bufferToHex(data[1][item]))\n        }\n        const jsonItem: AccessListItem = {\n          address,\n          storageKeys,\n        }\n        json.push(jsonItem)\n      }\n      AccessListJSON = json\n    }\n\n    return {\n      AccessListJSON,\n      accessList: bufferAccessList,\n    }\n  }\n\n  public static verifyAccessList(accessList: AccessListBuffer) {\n    for (let key = 0; key < accessList.length; key++) {\n      const accessListItem = accessList[key]\n      const address = <Buffer>accessListItem[0]\n      const storageSlots = <Buffer[]>accessListItem[1]\n      if ((<any>accessListItem)[2] !== undefined) {\n        throw new Error(\n          'Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.'\n        )\n      }\n      if (address.length != 20) {\n        throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes')\n      }\n      for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n        if (storageSlots[storageSlot].length != 32) {\n          throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes')\n        }\n      }\n    }\n  }\n\n  public static getAccessListJSON(accessList: AccessListBuffer) {\n    const accessListJSON = []\n    for (let index = 0; index < accessList.length; index++) {\n      const item: any = accessList[index]\n      const JSONItem: any = {\n        address: '0x' + setLengthLeft(<Buffer>item[0], 20).toString('hex'),\n        storageKeys: [],\n      }\n      const storageSlots: Buffer[] = item[1]\n      for (let slot = 0; slot < storageSlots.length; slot++) {\n        const storageSlot = storageSlots[slot]\n        JSONItem.storageKeys.push('0x' + setLengthLeft(storageSlot, 32).toString('hex'))\n      }\n      accessListJSON.push(JSONItem)\n    }\n    return accessListJSON\n  }\n\n  public static getDataFeeEIP2930(accessList: AccessListBuffer, common: Common): number {\n    const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost')\n    const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost')\n\n    let slots = 0\n    for (let index = 0; index < accessList.length; index++) {\n      const item = accessList[index]\n      const storageSlots = item[1]\n      slots += storageSlots.length\n    }\n\n    const addresses = accessList.length\n    return addresses * accessListAddressCost + slots * accessListStorageKeyCost\n  }\n}\n"],"names":["txData","opts","cache","hash","undefined","dataFee","activeCapabilities","DEFAULT_CHAIN","common_1","Mainnet","DEFAULT_HARDFORK","Istanbul","nonce","gasLimit","to","value","data","v","r","s","type","this","_type","ethereumjs_util_1","toBuffer","toNumber","txOptions","toB","vB","rB","sB","length","_validateCannotExceedMaxInteger","Object","BaseTransaction","capability","includes","stringError","errors","getBaseFee","gt","push","isSigned","verifySignature","fee","getDataFee","addn","common","param","gteHardfork","toCreationAddress","iaddn","txDataZero","txDataNonZero","cost","i","isActivatedEIP","dataLength","Math","ceil","initCodeCost","imuln","iadd","buf","publicKey","getSenderPublicKey","unpadBuffer","e","publicToAddress","privateKey","msg","_errorMsg","Error","hackApplied","supports","types_1","EIP155ReplayProtection","msgHash","getMessageToSign","ecsign","tx","_processSignature","index","indexOf","splice","chainId","chainIdBN","eq","copy","isSupportedChainId","chain","hardfork","forCustomChain","name","networkId","values","bits","cannotEqual","entries","key","gte","bufferToHex","toString","hf","postfix","exports","TRANSACTION_TYPE_BUFFER","Buffer","from","padStart","_super","_this","accessList","maxFeePerGas","maxPriorityFeePerGas","_getCommon","concat","accessListData","util_1","getAccessListData","AccessListJSON","verifyAccessList","mul","lt","eqn","checkMaxInitCodeSize","freeze","__extends","FeeMarketEIP1559Transaction","serialized","slice","equals","decode","Array","isArray","fromValuesArray","fromSerializedTx","validateNoLeadingZeroes","getDataFeeEIP2930","isFrozen","baseFee","gasPrice","min","sub","add","bnToUnpaddedBuffer","base","raw","encode","hashMessage","message","keccak256","serialize","getMessageToVerifySignature","ecrecover","fromTxData","accessListJSON","getAccessListJSON","bnToHex","errorStr","_getSharedErrorPostfix","baseTransaction_1","AccessListEIP2930Transaction","yParity","enumerable","get","default","__exportStar","_validateTxV","chainIdDoubled","muln","Transaction","_getMessageToSign","rlphash","vBN","ltn","numSub","subn","isEven","divn","onEIP155BlockOrLater","TransactionFactory","txType","_1","EIP","isBuffer","fromSerializedData","transactionID","_common","isAccessListBuffer","input","firstItem","Capability","AccessLists","bufferAccessList","isAccessList","newAccessList","item","addressBuffer","address","storageItems","storageKeys","json","jsonItem","accessListItem","storageSlots","storageSlot","JSONItem","setLengthLeft","slot","accessListStorageKeyCost","accessListAddressCost","slots"],"sourceRoot":""}